@using Starterkit.Shared.Partials.General;
@inject IJSRuntime JS
@page "/"
@page "/signin"
@inject AuthService AuthService
@using Bizz.Entities.Models;
@using Bizz.DataService.Services;
@using Starterkit.Components;
@inject NavigationManager NavigationManager


<script suppress-error="BL9992" src='@KTTheme.GetAssetPath("js/custom/authentication/sign-in/general.js")'></script>

<!--begin::Form-->
<div class="form w-100" novalidate="novalidate" id="kt_sign_in_form" data-kt-redirect-url="/" action="#">
    <!--begin::Heading-->
    <div class="text-center mb-11">
        <!--begin::Title-->
        <h1 class="text-dark fw-bolder mb-3">
            Sign In
        </h1>
        <!--end::Title-->
      
        <!--begin::Subtitle-->
        <div class="text-gray-500 fw-semibold fs-6">
            
            <img class="img" width="250" height="80" src="/assets/media/logos/logo.png" />
        </div>

        <div class="text-gray-500 fw-semibold fs-6">
            Your Social Campaigns

        </div>
        <!--end::Subtitle--->
    </div>
    <!--begin::Heading-->

    <!--begin::Login options-->
    <div class="row g-3 mb-9">
        <!--begin::Col-->
        
        <!--end::Col-->

        <!--begin::Col-->
        
        <!--end::Col-->
    </div>
    <!--end::Login options-->

    <!--begin::Separator-->
    <div class="separator separator-content my-14">
        <span class="w-125px text-gray-500 fw-semibold fs-7">Or with email</span>
    </div>
    <!--end::Separator-->
    <AlertBox Message="@alertMessage" Type="@alertType" OnClose="ClearErrorMessage" />
    <!--begin::Input group--->
    <div class="fv-row mb-8">
        <!--begin::Email-->
        <input type="text" placeholder="Email" name="email" autocomplete="off" id="username" class="form-control bg-transparent" @bind="username" />

        <!--end::Email-->
    </div>

    <!--end::Input group--->
    <div class="fv-row mb-3">    
        <!--begin::Password-->
        <input type="password" placeholder="Password" name="password" autocomplete="off" class="form-control bg-transparent" @bind="password" />
        <!--end::Password-->
    </div>
    <!--end::Input group--->

    <!--begin::Wrapper-->
    <div class="d-flex flex-stack flex-wrap gap-3 fs-base fw-semibold mb-8">
        <div></div>

        <!--begin::Link-->
        <a href="/reset-password" class="link-primary">
            Forgot Password ?
        </a>
        <!--end::Link-->
    </div>
    <!--end::Wrapper-->    

    <!--begin::Submit button-->
    <div class="d-grid mb-10">
       
        <button @onclick="CheckUserInfo"  id="kt_sign_in_submit" class="btn btn-primary">
            <_ButtonIndicator ButtonLabel="Sign In"></_ButtonIndicator>
        </button>
    </div>
    <!--end::Submit button-->

    <!--begin::Sign up-->
    <div class="text-gray-500 text-center fw-semibold fs-6">
        Not a Member yet?

        <a href="/signup" class="link-primary">
            Sign up
        </a>
    </div>
    <!--end::Sign up-->
</div>
<!--end::Form--> 

@code{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender){
            await Task.Delay(1000);
            await JS.InvokeVoidAsync("KTSigninGeneral.init");
        }
    }


    private string username;
    private string password;


    private SetMasterLoginModel setmasterresponse;

    private AlertBox alertBox;

    private string? alertMessage;
    private string? alertType;


    private bool added = false;
    private bool isSubmitting = false;



    private void ClearErrorMessage()
    {
        alertMessage = null;
    }
    private async Task CheckUserInfo()
    {
        try
        {
            // Set the loading flag to true before starting the submission
            isSubmitting = true;

            // Simulating a delay for demonstration purposes
            // await Task.Delay(500);


            if (AuthService != null)
            {
                setmasterresponse = await AuthService.CheckUser(username, password);

                if (setmasterresponse != null)
                {
                    alertMessage = setmasterresponse.Response;
                    // Other processing
                    Console.WriteLine($"Status : {alertMessage}");
                    if (alertMessage == "OK")
                    {
                        Console.WriteLine($"Status : {setmasterresponse.Name}");
                        NavigationManager.NavigateTo("/add-org");
                        //alertBox.Type = "success";

                        // Set the error message and type to display in the alert
                        // alertBox.Message = "User Authenticated successfully!";

                    }
                    else
                    {
                        alertType = "danger";

                        // Set the error message and type to display in the alert
                        alertMessage = $"Error: {alertMessage}";
                    }
                    // Reset the loading flag after the submission is complete
                    isSubmitting = false;


                }
                else
                {

                    alertMessage = "Response object is null";
                    Console.WriteLine($"Status : {alertMessage}");
                }
            }
            else
            {
                alertMessage = "AuthService is null";
                Console.WriteLine($"Status : {alertMessage}");
            }





        }
        catch (Exception ex)
        {

            alertMessage = $"Error: {ex.Message}";
            // Set the alert type, e.g., "danger"
            alertType = "danger";

            // Set the error message and type to display in the alert
            alertMessage = $"Error: {ex.Message}";

            // Handle the exception (log, display an error message, etc.)
            Console.WriteLine($"Error loading page: {ex.Message}");
        }
    }




}